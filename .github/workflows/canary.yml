name: Canary deployment

on:
  pull_request_target:
    types: [opened, synchronize]

jobs:
  publish-canary:
    name: 'publish canary'
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Compute canary version
      id: compute-version
      env:
        ID: ${{ github.sha }}
      run: |
        COMMIT=$(git rev-parse --short HEAD)
        NOW=$(date +%s%3N)

        CURRENT_VERSION=$(cat package.json | jq -r '.version')
        NEW_VERSION=$CURRENT_VERSION-canary-$COMMIT-$NOW

        NAME=$(cat package.json | jq -r '.name')

        echo "::set-output name=version::$NEW_VERSION"
        echo "::set-output name=name::$NAME"

    - uses: actions/setup-node@v1
      with:
        registry-url: https://registry.npmjs.org/
        node-verion: '12.x'

    - name: Cache npm cache
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: v1-npm-${{ github.event.pull_request.head.ref }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          v1-npm-${{ github.event.pull_request.head.ref }}-
          v1-npm-

    - name: Install
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: npm ci

    - name: Bumb version
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        VERSION: ${{ steps.compute-version.outputs.version }}
      run: |
        npm version --no-git-tag-version $VERSION

    - name: Create deployment
      id: deployment
      uses: actions/github-script@0.4.0
      env:
        NAME: ${{ steps.compute-version.outputs.name }}
        VERSION: ${{ steps.compute-version.outputs.version }}
      with:
        github-token: ${{ secrets.TOKEN_REPO_WRITE }}
        previews: 'ant-man-preview,flash-preview'
        script: |
          const name = process.env.NAME;
          const version = process.env.VERSION;

          const branch = context.payload.pull_request.head.ref;

          const { data: deployment } = await github.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: branch,
            environment: 'npm',
            auto_merge: false,
            required_contexts: [],
            payload: {
              version,
              name,
              ref: context.payload.pull_request.head.sha,
              npmTag: branch,
            },
            description: `Deploy ${name}@${version} on npm`,
            production_environment: true,
          });
